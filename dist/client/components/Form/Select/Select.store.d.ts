import * as React from "react";
import { FormTheme, FormItemModel, FormIntegrationProps } from "../Form.types";
import { ValidationType } from "../../../utils/validation";
import { ObservableString } from "../../../utils/types";
import ModalStore from "../../../components/Modal/Modal.store";
import OptionStore from "../../../components/Form/Option/Option.store";
import ListStore from "../../../components/List/List.store";
import KeybindingStore from "../../../core/common/Keybinding.store";
export interface InitProps<T = CommonMap> {
    theme?: SelectStore<T>["theme"];
    label?: SelectStore<T>["label"];
    placeholder?: SelectStore<T>["placeholder"];
    defaultValue?: string | number;
    options: T[];
    getOptionLabel: (option: T) => ObservableString;
    getOptionValue: (option: T) => number | string;
    search?: SelectStore<T>["search"];
    validations?: SelectStore<T>["validations"];
    shouldValidate?: SelectStore<T>["shouldValidate"];
    shouldDisplayed?: SelectStore<T>["shouldDisplayed"];
    isTouched?: SelectStore<T>["isTouched"];
    isReadOnly?: SelectStore<T>["isReadOnly"];
    isDisabled?: SelectStore<T>["isDisabled"];
    onSubmit?: SelectStore<T>["onSubmit"];
}
export default class SelectStore<T = CommonMap> implements FormIntegrationProps, FormItemModel {
    static theme: typeof FormTheme;
    static hotkeyListOpen: KeybindingStore;
    static hotkeyListDown: KeybindingStore;
    static hotkeyListUp: KeybindingStore;
    static hotkeyListChangeValue: KeybindingStore;
    constructor(props?: InitProps<T>);
    private value;
    theme: FormTheme;
    label?: ObservableString;
    placeholder?: ObservableString;
    defaultValue: Nullable<OptionStore>;
    search: string;
    shouldValidate: boolean;
    shouldDisplayed: boolean;
    isTouched: boolean;
    isFocused: boolean;
    isReadOnly: boolean;
    isDisabled: boolean;
    validations: Array<ValidationType>;
    modal: ModalStore;
    targetRef: React.RefObject<HTMLButtonElement>;
    searchRef: React.RefObject<HTMLInputElement>;
    list: ListStore<OptionStore>;
    onSubmit?: () => void;
    get publicValue(): Nullable<OptionStore>;
    get formValue(): string;
    get error(): string;
    get isError(): boolean;
    get shouldDisplayError(): boolean;
    get shouldBeFocused(): boolean;
    open: () => void;
    close: () => void;
    toggle: () => void;
    changeSearch: (search: string) => void;
    onChangeSearch: (event: React.FormEvent<HTMLInputElement>) => void;
    initValue: (value: string | number) => void;
    reset: () => void;
    clear: () => void;
    selectOption: (option: Nullable<OptionStore>) => void;
    selectPrevOption: () => void;
    selectNextOption: () => void;
    selectAndScrollToOption: (option: Nullable<OptionStore>) => void;
    changeValue: (option: OptionStore) => void;
    changeValueFromSelection: (event: KeyboardEvent) => void;
    onFocus: () => void;
    onBlur: () => void;
}
